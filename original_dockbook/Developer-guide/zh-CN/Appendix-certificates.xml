<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Developer-guide.ent">
%BOOK_ENTITIES;
]>
<appendix id="appe-Certificates">
  <title>证书</title>

  <section id="sect-Certificates-Creating_SSL_TLS_Certificates">
    <title>创建 SSL/TLS 证书</title>
    <formalpara>
      <title>概述</title>
      <para>
        SSL/TLS 为使用 HTTPS 访问您的 &OVIRT; 提供了安全层。以下过程介绍了如何创建证书并使用该证书配置您的主机。
      </para>
    </formalpara>
    <para>
      以下过程需要使用 <command>openssl</command>。在您的主机上运行如下命令安装该工具：
    </para>
    <screen>
# yum install openssl
    </screen>
    <procedure>
      <title>创建证书认证机构</title>
      <para>
        证书认证机构 (CA) 通过对证书进行签名来提供对证书有效性的验证。网络浏览器包含了一些用以对与安全网络站点间的 HTTPS 通信进行验证的 CA 证书。这些 CA 证书中有一些是收费的，也有些是开放的且免费提供的。本过程描述了如何生成您自己的证书认证机构 (CA) 证书和密钥，以供您的内部网络使用。
      </para>
      <step>
        <para>
          运行如下命令：
        </para>
        <screen>
# openssl req -new -x509 -keyout ca.key -out ca.crt -days 3650
        </screen>
        <para>
          此命令请求生成一个有效期为 3650 天的 CA 证书对。
        </para>
      </step>
      <step>
        <para>
          输入密码以保护您的 CA：
        </para>
        <screen>
Generating a 2048 bit RSA private key
......................................................................................................................................+++..................................................................................................+++
writing new private key to 'ca.key'
Enter PEM pass phrase:
Verifying - Enter PEM pass phrase:
        </screen>
      </step>
      <step>
        <para>
          输入关于您的组织的信息：
        </para>
        <screen>
Country Name (2 letter code) [XX]:CN
State or Province Name (full name) []:Beijing
Locality Name (eg, city) [Default City]:Beijing
Organization Name (eg, company) [Default Company Ltd]:Eayun
Organizational Unit Name (eg, section) []:EayunOS
Common Name (eg, your name or your server's hostname) []:www.example.com
Email Address []:admin@eayun.com
        </screen>
        <para>
          以上信息将会形成您的证书中的唯一名称 (DN)。
        </para>
      </step>
    </procedure>
    <formalpara>
      <title>结论</title>
      <para>
        您创建了一个证书认证机构。<command>openssl</command> 创建了两个文件：管理员用以对证书进行签名的密钥文件 <filename>ca.key</filename> 和用户能够获取到的用以验证他们接收到的已签名证书有效性的公共 CA 证书 <filename>ca.crt</filename>。确保访问您的主机的用户都得到一份 <filename>ca.crt</filename> 的副本，这样子他们就可以将该证书导入到他们客户端中信任的 CA 存储中。
      </para>
    </formalpara>
  </section>

  <section id="sect-Certificates-Creating_an_SSL_Ceritificate">
    <title>创建 SSL 证书</title>
    <formalpara>
      <title>概述</title>
      <para>
        以下过程创建了一个 SSL 证书并使用 CA 密钥对其进行签名。SSL/TLS 证书为使用 HTTPS 访问您的 &OVIRT; 提供了安全层。以下过程介绍了如何创建证书并使用该证书配置您的主机。
      </para>
    </formalpara>
    <para>
      以下过程需要使用 <command>openssl</command>。在您的主机上运行如下命令安装该工具：
    </para>
    <screen>
# yum install openssl
    </screen>
    <procedure>
      <title>创建 SSL 证书</title>
      <step>
        <para>
          为您的主机创建一个密钥：
        </para>
        <screen>
# openssl genrsa -out ssl.key
        </screen>
        <para>
          这将创建一个 <filename>ssl.key</filename> 密钥文件。
        </para>
      </step>
      <step>
        <para>
          使用该密钥文件为您的证书创建一个签名请求：
        </para>
        <screen>
# openssl req -new -key ssl.key -out ssl.csr
        </screen>
        <para>
          签名请求将会询问一些组织的信息以便形成您的证书中的唯一名称 (DN)。
        </para>
        <screen>
Country Name (2 letter code) [XX]:CN
State or Province Name (full name) []:Beijing
Locality Name (eg, city) [Default City]:Beijing
Organization Name (eg, company) [Default Company Ltd]:Eayun
Organizational Unit Name (eg, section) []:EayunOS
Common Name (eg, your name or your server's hostname) []:www.example.com
Email Address []:admin@eayun.com
        </screen>
        <para>
          这将创建一个 <filename>ssl.csr</filename> 签名请求文件。
        </para>
      </step>
      <step>
        <para>
          创建一个已签名的 SSL 证书：
        </para>
        <screen>
# openssl ca -cert ca.crt -keyfile ca.key -out ssl.crt -infiles ssl.csr
        </screen>
        <para>
          <command>openssl</command> 将询问你的 CA 密钥的密码。
        </para>
        <para>
          这将创建一个名为 <filename>ssl.crt</filename> 的证书文件。
        </para>
        <important>
          <para>
            以上的命令可能会出现如下错误：
          </para>
          <screen>
Using configuration from /etc/pki/tls/openssl.cnf
Enter pass phrase for ca.key:
/etc/pki/CA/index.txt: No such file or directory
unable to open '/etc/pki/CA/index.txt'
139883256969032:error:02001002:system library:fopen:No such file or
directory:bss_file.c:355:fopen('/etc/pki/CA/index.txt','r')
139883256969032:error:20074002:BIO routines:FILE_CTRL:system
lib:bss_file.c:357:
          </screen>
          <procedure>
            <title>解决此错误</title>
            <step>
              <para>
                创建 index.txt 文件。
              </para>
              <screen>
# touch /etc/pki/CA/index.txt
              </screen>
            </step>
            <step>
              <para>
                创建一个序列文件以标识 CA 和随后的证书。
              </para>
              <screen>
# echo '1000' > /etc/pki/CA/serial
              </screen>
            </step>
          </procedure>
          <para>
            您只需要在第一次生成 SSL 证书的时候进行此工作。现在可以重新运行命令：
          </para>
          <screen>
# openssl ca -cert ca.crt -keyfile ca.key -out ssl.crt -infiles ssl.csr
          </screen>
        </important>
      </step>
    </procedure>
    <para>
      <filename>ssl.crt</filename> 和 <filename>ssl.key</filename> 将组成您的主机用以加密解密 HTTPS 数据的证书对。
    </para>
    <formalpara>
      <title>结论</title>
      <para>
        您创建了 SSL 证书并使用 CA 密钥对其进行签名。<command>openssl</command> 创建了两个文件：管理员用以对证书进行签名的密钥文件 <filename>ca.key</filename> 和用户能够获取到的用以验证他们接收到的已签名证书有效性的公共 CA 证书 <filename>ca.crt</filename>。确保访问您的主机的用户都得到一份 <filename>ca.crt</filename> 的副本，这样子他们就可以将该证书导入到他们客户端中信任的 CA 存储中。
      </para>
    </formalpara>
  </section>

  <section id="sect-Certificates-Configuring_HTTPS_Communication">
    <title>配置 HTTPS 通信</title>
    <formalpara>
      <title>概述</title>
      <para>
        在您的系统上配置 HTTPS 使用 SSL 证书密钥。
      </para>
    </formalpara>
    <procedure>
      <title>配置 HTTPS 通信</title>
      <step>
        <para>
          编辑 <filename>/etc/httpd/conf.d/ssl.conf</filename> 文件并修改如下设置：
        </para>
        <screen>
SSLCertificateFile <emphasis><replaceable>[ssl.crt 文件的位置]</replaceable></emphasis>
SSLCertificateKeyFile <emphasis><replaceable>[ssl.key 文件的位置]</replaceable></emphasis>
        </screen>
      </step>
      <step>
        <para>
          修改这些设置之后重启您的 web 服务器：
        </para>
        <screen>
# service httpd restart
        </screen>
      </step>
    </procedure>
    <formalpara>
      <title>结论</title>
      <para>
        您在您的系统上完成了对 HTTPS 使用 SSL 证书密钥的配置。
      </para>
    </formalpara>
  </section>

  <section id="sect-Certificates-Network_Security_Services_NSS_Database">
    <title>网络安全服务 (NSS) 数据库</title>
    <para>
      网络安全服务 (NSS) 是一套支持 SSL 的开源的密码系统库。一些 Linux 工具，比如 <command>cURL</command>，使用 NSS 来验证可信的 SSL 通信。此过程帮助用户导入 <filename>EayunOS.cer</filename> 证书进入本地的 NSS 数据库中。
    </para>
    <para>
      对于单个用户，使用如下命令导入 <filename>EayunOS.cer</filename> 证书：
    </para>
    <screen>
$ certutil -d sql:$HOME/.pki/nssdb -A -t TC -n "EayunOS Manager" -i EayunOS.cer
    </screen>
    <para>
      对于系统上的所有用户，使用 <emphasis>root</emphasis> 账户登录并运行如下命令导入 <filename>EayunOS.cer</filename> 证书：
    </para>
    <screen>
# certutil -d sql:/etc/pki/nssdb -A -t TC -n "EayunOS Manager" -i EayunOS.cer
    </screen>
  </section>

  <section id="sect-Certificates-Java_Keystores">
    <title>Java Keystore</title>
    <para>
      此过程示范了如何导入一个从 &OVIRT; &MANAGER; 服务器上导出的 X.509 证书至一个新建的 Java keystore 文件中。
    </para>
    <procedure>
      <title>导入一个证书至新建的 Java keystore 中</title>
      <para>
        此过程帮助用户导入 <filename>EayunOS.cer</filename> 证书至 Java keystore 中。过程中需要用到来自 Java 开发工具套件 (JDK) 中的 <command>keytool</command> 管理工具，在 Linux 和 Windows 系统中都可以得到并使用。
      </para>
      <step>
        <para>
          进入您的客户端机器并确认 <filename>EayunOS.cer</filename> 证书位置。
        </para>
      </step>
      <step>
        <para>
          使用 Java <command>keytool</command> 管理工具导入 <filename>EayunOS.cer</filename> 证书：
        </para>
        <screen>
keytool -importcert -v -trustcacerts -keystore restapi.jks -noprompt -alias EayunOS -file EayunOS.cer
        </screen>
        <para>
          <command>keytool</command> 工具将新建一个名为 <filename>restapi.jks</filename> 的 keystore 文件。
        </para>
      </step>
      <step>
        <para>
          <command>keytool</command> 将询问 keystore 文件的密码。输入该密码然后 <command>keytool</command> 会请求再次输入确认。
        </para>
      </step>
      <step>
        <para>
          <command>keytool</command> 添加 <filename>EayunOS.cer</filename> 证书至 <filename>restapi.jks</filename> keystore 文件中。使用 <command>keytool -list</command> 命令查看 keystore 文件中的证书项目：
        </para>
        <screen>
keytool -list -keystore restapi.jks -storepass [password]
        </screen>
      </step>
    </procedure>
    <important>
      <para>
        有些版本的 <command>keytool</command> 不能够正确的解析证书。如果 <command>keytool</command> 不能够解析出该证书的格式，使用 <command>openssl</command> 工具将其转换为另一个 X.509 格式的证书：
      </para>
      <screen>
openssl x509 -in EayunOS.cer -out EayunOS.new -outform [pem|der]
      </screen>
      <para>
        这将创建一个文件名为 <filename>EayunOS.new</filename> 的证书，可以替代 <filename>EayunOS.cer</filename> 使用。
      </para>
    </important>
  </section>
</appendix>
