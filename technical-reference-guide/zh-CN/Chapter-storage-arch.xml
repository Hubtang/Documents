<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "technical-reference-guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-Documents-technical-reference-guide-Chapter-storage-arch">
	<title>&OVIRT;存储架构</title>
	<para>
	</para>
	<section id="sect-Documents-technical-reference-guide-Chapter-storage-arch-Section_1">
		<title>存储的概念</title>
		<para>
		</para>
	        <section id="sect-Documents-technical-reference-guide-Chapter-storage-arch-Section_1-1">
                    <title>数据中心</title>
                    <para>
                      数据中心在&OVIRT;中是一个最高级别的抽象容器，每个数据中心包括下面三种类型的子容器：
                    </para>
                    <para>
                          <itemizedlist>
                              <listitem>
                                 <para>
                                   <emphasis>存储容器</emphasis>保存了存储类型、存储域以及存储域的连接状态等信息，存储由数据中心来定义，并能够提供给数据中心内所有的集群，一个数据中心下的所有集群内的主机访问的是同一个数据域。
                                 </para>
                              </listitem>
                              <listitem>
                                 <para>
                                    <emphasis>网络容器</emphasis>，体现了数据中心的逻辑网络的信息。包括网络地址、VLAN标签、以及STP的支持情况。逻辑网络在数据中定义，在集群中实现。
                                 </para>
                              </listitem>
                              <listitem>
                                 <para>
                                    <emphasis>集群容器</emphasis>，集群是一组物理主机的逻辑组合，在&OVIRT;中，集群还必须是根据CPU类型来定义。集群还是一个迁移的范围约定，在某个集群内主机中运行的虚拟机，其在线迁移功能不能迁移到另外的集群内的主机中。一个数据中心可以有多个集群，一个集群可包含多个主机，就是这么一个逻辑关系。
                                 </para>
                              </listitem>
                          </itemizedlist>
                   </para>
                </section>
	        <section id="sect-Documents-technical-reference-guide-Chapter-storage-arch-Section_1-2">
                    <title>数据域概览</title>
                    <para>
                     数据域是中心化的存放虚拟机镜像和存储元数据的仓库，诸如虚拟机镜像、ISO镜像、快照以及存储本身的元数据信息等，供数据中心内所有的主机访问。 
                    </para>
                    <para>
                      &OVIRT;数据域同时支持基于文件和基于快设备的存储，支持的具体的有：网络文件系统（NFS），iSCSI,FCoE,以及SAS。
                    </para>
                    <para>
                      这里特别强调的一点是，&OVIRT;支持并行网络文件系统，即pNFS,这是NFSv4.1的一个扩展特性，用于处理高性能I/O的集群服务，有以下三点好处：并行I/O、快速的伸缩性、高性能。 pNFS将元数据保存在不同的服务器上，从而将元数据和数据做到分离，元数据服务为客户端提供基本的分布信息，让客户端并行的访问数据。Hypervisor/主机通过pNFS实现一个会话多个连接的访问虚拟机的数据，而且连接可以分布到不同的网卡。pNFS支持块设备、对象存储以及文件的形式。
                    </para>
                    <para>
                      数据域有三种类型：数据存储域、ISO存储域以及导出存储域。  
                    </para>
                </section>
	        <section id="sect-Documents-technical-reference-guide-Chapter-storage-arch-Section_1-3">
                    <title>存储域后端存储类型</title>
                    <para>可作为存储域后端的存储，&OVIRT;同时支持基于块设备和基于文件系统的存储。</para>
                    <formalpara><title>基于文件系统的存储</title>
                         <para>
                            在&OVIRT;中支持文件系统存储的有NFS以及本地文件系统。
                            <note><title>注意</title>
                            <para>
                                &OVIRT;支持POSIX标准的任何网络文件系统，但是不提供技术支持。
                            </para>
                            </note>
                            &OVIRT;不支持文件系统本身的管理，仅限于使用，所以需要额外的配置。
                         </para>
                    </formalpara>
                    <formalpara><title>基于块设备的存储</title>
                         <para>
                          基于块设备的存储即使用未格式化的块设备，&OVIRT;使用逻辑卷管理将所分配到的块设备聚合为一个大的卷组，每个主机都会运行一个LVM实例，并且并不知道其他主机亦运行，这个需要VDSM来完成，VDSM会扫描逻辑卷的变化，一旦发现，VDSM就会通知其他主机刷新逻辑卷的信息。至于扩展更多的存储给已有的存储域，&OVIRT;会通知VDSM来完成所有主机的刷新操作。
                          逻辑单元号（LUN）是特殊的块设备，iSCSI,FoE,SAS等协议都是通过LUN来连接的，&OVIRT;管理端使用软件的iSCSI来连接LUN。这里要提到的是存储池管理，基于块设备的存储的任何变化，诸如：创建逻辑卷、扩展或删除逻辑卷、添加新的LUN，都是通过这个特殊的主机来完成的。
                         </para>
                    </formalpara>
                </section>
	        <section id="sect-Documents-technical-reference-guide-Chapter-storage-arch-Section_1-4">
                    <title>存储域的类型</title>
                    <para>
                          <itemizedlist>
                              <listitem>
                              <para>
                                 <emphasis>数据存储域</emphasis>存储这所有的虚拟机磁盘。数据存储域支持的类型有：NFS,iSCSI,FCP,posix兼容的文件系统，以及Linux本地文件系统。数据存储域不可以在多个数据中心间共享，另外，数据中心类型必须和数据存储域保持一致（比如都是iscsi)
                              </para>
                              </listitem>
                              <listitem>
                              <para>
                                 <emphasis>导出存储域</emphasis>提供在数据中心之间转换虚拟机磁盘及模板，当然，它还可以用于备份，支持NFS类型的存储，它可以让多个数据中心使用，但每次仅能用于某一个数据中心。
                              </para>
                              </listitem>
                              <listitem>
                              <para>
                                 <emphasis>ISO存储域</emphasis>保存ISO文件（也通常叫镜像），ISO文件也就是通常CD或DVD中的内容，在&OVIRT;中ISO的类型有操作系统安装盘、应用程序安装盘、或者是客户操作系统的agent程序等，这些镜像可以挂接到虚拟机，和现实中物理通过光驱启动或安装是一个道理。
                              ISO存储域提供ISO文件，数据中心内所有的主机都可访问，也可同时挂载到多个数据中心。
                              </para>
                              </listitem>
                          </itemizedlist>
                    </para>
                </section>
	        <section id="sect-Documents-technical-reference-guide-Chapter-storage-arch-Section_1-5">
                    <title>虚拟磁盘镜像的文件格式</title>
                    <formalpara><title>QOW2格式</title>
                      <para>
                        QCOW2是一种虚拟机磁盘镜像的存储格式，全称是<emphasis>QEMU copy on write</emphasis>。QCOW2通过增加一个逻辑块和物理块的隐射来实现从物理磁盘到虚拟磁盘的解藕，每一个逻辑的块设备都对应有物理块设备的偏移量，从而使QCOW的实际使用量仅是基础盘所增加的那部分，进而实现磁盘过量使用、虚拟机快照等功能。
                      </para>
                    </formalpara>
                    <formalpara><title>RAW</title>
                      <para>
                       RAW格式的I/O性能相比于QCOW2有一定的优势，它不需要主机做任何的操作，当虚拟机需要写数据时，它会给虚拟磁盘一个偏移量，它会源封不动的将这个偏移量写到基础盘或者是逻辑卷。
                       在&OVIRT;中，RAW在设置磁盘类型为预分配时会占用和大小相同的物理空间，当然这个仅限于使用文件系统，当使用SAN存储时因为有LVM的管理，所以此时也可设置磁盘类型为RAW。
                      </para>
                    </formalpara>
                </section>
	        <section id="sect-Documents-technical-reference-guide-Chapter-storage-arch-Section_1-6">
                    <title>虚拟磁盘镜像的存储规则</title>
                    <formalpara><title>预分配</title>
                      <para>
                            顾名思义，就是在创建虚拟机时决定的虚拟机磁盘大小会占用相等的实际物理空间，比如创建一个大小为50GB的虚拟磁盘，那么就会占用存储域里50GB的容量。预分配从技术角度讲，就是在写数据的时候不需要增加额外的计算，性能会有所提升，但坏处是无法再扩展，所以&OVIRT;建议在一些高I/O,容错性更强的应用中使用，比如虚拟机用作服务器，数据库等。
                            <note><title>注意</title>
                            <para>
                               如果正在使用的存储后端提供的自动精简配置功能， 预分配的存储仍然能够从管理门户选中时配置存储虚拟机。
                               (测试结果无法验证：by lijiansheng)
                            </para>
                            </note>
                      </para>
                    </formalpara>
                    <formalpara><title>精简置备</title>
                      <para>
                            当虚拟机创建时所设置大小其实是一个上限值，实际上它仅占用很少的一部分存储域容量，只有当虚拟机写数据时才真正的分配，一直达到上限为止。在文件系统中，如ext3/4,xfs中，此表现为一个稀疏文件。
                            此模式适用于低I/O负载的，可以忍受一点的宕机的场景，比如桌面系统。 
                      </para>
                    </formalpara>
                </section>
	        <section id="sect-Documents-technical-reference-guide-Chapter-storage-arch-Section_1-7">
                    <title>存储域的自动恢复功能</title>
                    <para>
                      连接到存储的所有主机均会通过读取元数据来监控存储域的状态，一旦存储域出现问题，所有的主机都会报告它们不能访问到存储域。但是重试不属于主机的职责，&OVIRT;管理程序会在每隔5分钟尝试重新激活存储域，这样一旦存储恢复，就可以使用了，而无需管理员干涉。
                    </para>
                </section>

	        <section id="sect-Documents-technical-reference-guide-Chapter-storage-arch-Section_1-8">
                    <title>存储池管理</title>
                    <para>
                     &OVIRT;使用元数据来描述存储域的内部结构，存储域的结构化数据会跟踪虚拟机镜像、快照的建立、删除，以及卷的扩展等。元数据会写入每个数据域，主机遵守每次只能有一台写入，多台主机读取的原则。
                    </para>
                    <para>
                     每个数据中心只能有一台主机做存储池管理，其他主机可以读取元数据，只有SPM可以对数据域的结构做改变，SPM来把控所有的元数据变动，诸如创建、删除磁盘镜像，创建、合并快照，在不同的数据域间复制虚拟磁盘镜像，创建模板，以及为块设备分配空间。
                    </para>
                    <para>
                     每个主机都可以手动的设置为SPM，当然您也可以不用理会，交给&OVIRT;管理程序自动分配。&OVIRT;管理分配给SPM这个角色，承担着基于存储为中心的租約。在租約期内SPM主机可以写入元数据，基于存储为中心的写入明显的好处就是无须管理端或主机来跟踪。
                    </para>
                    <para>
                     在以块设备为存储域时（iSCSI/FCP),基于存储为中心的租約写入一个特别的逻辑卷，称之为租約；元数据亦写入一个特别的逻辑卷，称之为元数据。对元数据逻辑卷的改动受到租約逻辑卷的保护。
                    </para>
                    <para>
                      有spmstart这个程序来告诉主机，什么时候来接受基于存储为中心的租約。
                    </para>
                    <para>
                     管理端基于下面原因会迁移SPM到其他的主机  
                    </para>
                    <para>
                     <itemizedlist>
                        <listitem>
                           <para>
                           SPM主机除能够访问主存储域之外，不能访问任何的存储域。
                           </para>
                        </listitem>
                        <listitem>
                           <para>
                           SPM主机因为与存储失去连接而无法续租，或者是租約逻辑卷写满，无法作写入操作。
                           </para>
                        </listitem>
                        <listitem>
                           <para>
                           SPM主机崩溃。
                           </para>
                        </listitem>
                     </itemizedlist>
                    </para>
                         <figure id="eayunos-technical-reference-spm-metadata"><title>SPM写入结构化元数据示意图</title>
		           <mediaobject>
			     <imageobject>
				<imagedata fileref="images/eayun_storage_spm_metadata.png" format="PNG" scalefit="1" width="100%"/>
			     </imageobject>
		           </mediaobject>
                         </figure>
                </section>
	        <section id="sect-Documents-technical-reference-guide-Chapter-storage-arch-Section_1-9">
                    <title>选择主机为存储池管理(SPM)的流程</title>
                    <para>
                      如果用户不是手动的将某个主机设置为SPM,则这个过程有&OVIRT;管理程序来自动选举，下面是基本的流程。
                    </para>
                    <para>
                     首先&OVIRT;会要求主机所在的VDSM确认它是否是基于以存储为中心的租约。
                    </para>
                    <para>
                      &OVIRT;管理程序本身会跟踪自一个存储域创建到现在的所有SPM分配的历史，有以下三种方法可以确认SPM角色：
                       <itemizedlist>
                          <listitem>
                            <para>
                              使用一个叫做"getSPMstatus"的命令，VDSM可以为管理端程序提供此主机为SPM的三种状态："SPM""Contending", or "Free"。
                            </para>
                          </listitem>
                          <listitem>
                            <para>
                             在数据中的元数据卷里存放着SPM的状态的主机信息。
                            </para>
                          </listitem>
                          <listitem>
                            <para>
                            在数据中的元数据卷里存放着拥有SPM的状态主机信息的版本。
                            </para>
                          </listitem>
                       </itemizedlist>
                    </para>
                    <para>
                      如果操作成功，响应主机保留了存储为中心的租约，&OVIRT;会在管理员门户将主机标记为SPM，然后就没有然后了。
                    </para>
                    <para>
                     假设SPM主机没有响应，系统就认为它不可达，这时如果您设置了电源管理，&OVIRT;会将这台主机强制断电隔离，假如没有设置的话，则需要您手动的确认将这台主机隔离。&OVIRT;认为原先的SPM不被隔离，则有权拒绝将SPM再分配，及时您有再多的主机。 
                    </para>
                    <para>
                     当SPM角色空闲、存储为中心的租约是有可租用的，那么&OVIRT;会从数据中心内随机的找一台机器来充当SPM这个角色。 
                    </para>
                    <para>
                     假如在赋予某主机为SPM时失败了，&OVIRT;则会将此主机统统加到一个叫做失败者的列表中，然后他会接着在余下的主机中继续随机的挑选。  
                    </para>
                    <para>
                     只要出现SPM无响应或者不可达的情况，&OVIRT;选择主机为存储池管理(SPM)的流程就会启动。
                    </para>
                    <para>
 
                    </para>
                </section>
	        <section id="sect-Documents-technical-reference-guide-Chapter-storage-arch-Section_1-10">
                    <title>关于独占资源及sanlock原理介绍</title>
                    <para>在&OVIRT;环境中，某些资源是必须以独占的方式访问的。</para>
                    <para>
                      SPM即是这样的资源，如果一个数据中心同时有两台主机是SPM的话，那么就会出现两台主机同时写入数据到一个地方，即破坏数据。
                    </para>
                    <para>
                     在&OVIRT;早期版本中，SPM独占是VDSM的一个子功能叫安全租用来维护和跟踪的，安全租用在写在一个特别的地方，数据中心内所有的主机以独立于网络的方式访问这个区域。VDSM的安全租用技术仅限于一种类型的独占资源：SPM。 
                    </para>
                    <para>
                      因为VDSM的安全租用技术的局限性，所以引入了sanlock这个程序，sanlock不仅可以实现VDSM的安全租用的功能，而且还可以管理其他的类似的独占资源。如果某个程序需要独占资源可以向sanlock提出申请，一旦申请成功，sanlock便不再让任何其他的程序访问。在SPM的处理方面，vdsm不再去锁定（安全租用）资源，而是向sanlock提出申请。
                    </para>
                    <para>
                      “所”的跟踪是利用一种叫做lockspace的空间，在每个存储域中都有一块这样的空间，
                    </para>
                    <!-- TO DO actualy i not understand sanlock and vdsm how to works detials.so i need read more.-->
                </section>
	</section>
	
	<section id="sect-Documents-technical-reference-guide-Chapter-storage-arch-Section_2">
		<title>基于块设备的精简原理</title>
                   <para></para>
                    <para>
                    </para>
	        <section id="sect-Documents-technical-reference-guide-Chapter-storage-arch-Section_2-1">
                    <title>精简模式与存储的过量使用</title>
                    <para>
                     &OVIRT;支持虚拟机镜像的精简模式，以达到可以分配超出用户物理存储容量的效果。
                    </para>
                    <para>
                     为了在块设备中支持这种模式，VDSM在实际使用的存储空间和逻辑上的空间定义了一个阀值，这个阀值保证实际写入磁盘的数据要小于后端逻辑卷的容量。QEMU会标识一个最高的偏移，它表示可以使用的最大容量。VDSM会监控这个偏移量，确保实际使用不会超过阀值。
                    </para>
                    <para>
                     当数据不断增长，开始接近所设定的阀值时，VDSM会通知&OVIRT;管理程序，目前虚拟磁盘所使用的逻辑卷空间不足，&OVIRT;管理端会向SPM申请扩展逻辑卷。这样的流程只要是后端存储一直有空间，就会不断的重演。当后端存储也快耗尽的时候，你需要联系存储厂商继续扩展了。
                    </para>
                </section>
	        <section id="sect-Documents-technical-reference-guide-Chapter-storage-arch-Section_2-2">
                    <title>关于逻辑卷扩展</title>
                    <para>
                      上节谈到的当存储超出设定的阀值的时候，需要再分配给虚拟磁盘空间，这个实现就是由逻辑卷（LVM）的扩展实现的。
                    </para>
                    <para>
                     &OVIRT;使用逻辑卷来实现精简模式，使用QCOW2存储格式。这里举个例子，当在管理端定义一个100G的精简模式的虚拟磁盘，对应的逻辑卷最开始会分配1G的逻辑卷，当qemu使用的存储达到VDSM所设定的阀值时，本地的VDSM向SPM提出申请1G的空间，SPM则会使用逻辑卷扩展来增加1G，然后会刷新卷组信息并确认扩展成功。
                    </para>
                    <para>
                     逻辑卷的扩展机制在&OVIRT;中无需手动去同步，&OVIRT;实现了一套邮箱系统来互通信息，在每个存储域中有一个专用的邮箱，当需要扩展逻辑卷的那台主机执行了逻辑卷扩展时，它会往邮箱里写入一段信息，一旦发出，主机则会在每隔2秒去扫描一次是否有回复；SPM则会间断性的去读新来的邮件，但收到扩展时，则会作出回应，当主机收到来自SPM的回应时，她才开始刷新卷组信息，同步到内核，执行成功。
                    </para>
                    <para>
                     当后端的存储的空间满时，也就是说虚拟磁盘的扩展再也申请不到资源的时候，QEMU会报出enospc error,从程序的角度来讲，这意味着没有任何的存储资源可以使用，这时，正在运行的虚拟机会是暂停状态。这个时候需要用户您介入，给卷组加入更多LUN。   
                    </para>
                   <para>
                    当新的LUN加入到卷组后，SPM会自动将之前的“债”还完，这是个自动化的过程，一旦有了空间，虚拟机被中断的操作会继续，停止的虚拟机会恢复。
                   </para>
                </section>
	</section>

</chapter>

