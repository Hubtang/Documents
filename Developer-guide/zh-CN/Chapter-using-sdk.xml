<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Developer-guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-EayunOS-Developer-guide-python-sdk_Chapter">
	<title>使用软件开发包</title>
	<para>
	
	</para>
	<section id="sect-EayunOS-Developer-guide-python-sdk_Chapter-python-sdk_Section_1">
		<title>使用python连接到应用程序接口</title>
		<para>
		   使用ovirtsdk.api模块，创建类API的实例，python才能连接到REST API，所以在脚本的开始部分，写如下导入语句是必须的：
		</para>
                <programlisting language="python">
                 from ovirtsdk.api import API
                </programlisting>
                <para>
                  类API的构造函数可接受很多参数，目前支持的参数有如下内容：
                </para>
                <formalpara><title>url</title>
                  <para>
                   指定&OVIRT;管理端的URL以连接到它，包含路径/api。此参数是强制性的，必须给定。
                  </para>
                </formalpara>
                <formalpara><title>username</title>
                  <para>
                  指定连接时使用的用户名，使用UPN格式。此参数是强制性的，必须给定。
                  </para>
                </formalpara>
                <formalpara><title>password</title>
                  <para>
                   指定连接时使用的用户的密码。此参数是强制性的，必须给定。
                  </para>
                </formalpara>
                <formalpara><title>key_file</title>
                  <para>
                   指定PEM格式的密钥文件，其包含和cert_file所指定的认证所关联的私钥。此参数为可选参数。
                  </para>
                </formalpara>
                <formalpara><title>cert_file</title>
                  <para>
                   指定PEM格式的客户端证书，此证书用于客户端连接到服务器时建立身份关系。此参数为可选参数。
                  </para>
                </formalpara>
                <formalpara><title>ca_file</title>
                  <para>
                  指定从服务端取得授权证书的证书文件。 除非insecure设置为true,否则，此选项为强制性的。
                  </para>
                </formalpara>
                <formalpara><title>port</title>
                  <para>
                   若没有在url中指定特定的端口，可使用此参数指定。此参数为可选参数。
                  </para>
                </formalpara>
                <formalpara><title>timeout</title>
                  <para>
                   指定超时时间，单位为秒。此参数为可选参数。
                  </para>
                </formalpara>
                <formalpara><title>persistent_auth</title>
                  <para>
                   指定当次连接为持久，参数为True或False,此参数为可选参数，且默认为False。
                  </para>
                </formalpara>
                <formalpara><title>insecure</title>
                  <para>
                   允许通过ssl连接而无需获得证书的授权，参数为True或False,如果将insecure设置为Fasle(也是系统默认的)，ca_file必须提供。
                   请谨慎使用此参数，这容易被使用man-in-the-middle (MIT M)攻击。
                  </para>
                </formalpara>
                <formalpara><title>filter</title>
                  <para>
                   指定基于用户权限的过滤器是否起作用，合法的参数为True或false.若Filter设置为false,也是系统默认的，则加入此必须为管理员。
                   若设置为True,则任何用户都可以使用，但且其可运行的动作等是基于用户权限，也就是由管理端自动过滤掉不属于他的权限。
                   此参数为可选参数。
                  </para>
                </formalpara>
                <formalpara><title>debug</title>
                  <para>
                   指定建立的连接是否打开调试模式，参数为True或Fasle,为可选参数。
                  </para>
                </formalpara>
                <para>
                开发者可以建立和操作多个ovirtsdk.API的python类的实例去和多个&OVIRT;管理端的RESTful API通信。 
                </para>
                <para>
                 下面的这个实例脚本，建立了一个API类的实例，使用test()方法检测连接是否正常，使用disconnect()断开连接：
                </para>
                <programlisting language="python">
     from ovirtsdk.api import API

api_instance = API ( url="https://192.168.3.91",
                     username="admin@internal",
                     password="abc123",
                     ca_file="/etc/pki/ovirt-engine/ca.pem")
if api_instance.test() == 1:
   print "Connected successfully!"
else:
   print "didn't connect.try again."

api_instance.disconnect()
                </programlisting>
                <para>
                 使用Pydoc,可以将ovirtsdk.api所有的方法列出来。
                </para>
	</section>
	
	<section id="sect-EayunOS-Developer-guide-python-sdk_Chapter-python-sdk_Section_2">
		<title>资源及其集合</title>
		<para>
		 使用python语言来实现RESTfull API的绑定，有其理论和实践上的优势。所有的RESTful API有下面两项内容
                 是程序员所必须掌握的：  	
		</para>
                <formalpara><title>资源</title>
		<para>
		 资源在RESTful API中是一个固定的包含一组属性相关的以及特定的类型的接口对象，用于资源交互的接口提供的方法
                 有更新(update)和删除(delete)。另外一些资源的所支持的动作需指定其所属类型，比如主机资源中审批方法。	
		</para>
                </formalpara>
                <formalpara><title>资源集合</title>
		<para>
		 顾名思义，资源集合即是一组相同类型的资源的集合，API同时提供高级别的资源集合，也提供子的资源集合。举例说明：
                 主机(hosts)资源集合是一个高级别的，其包含了环境中所有的主机，host.nics则是一个子的资源集合的例子，其包含了主机
                 资源集合中所有的网卡。
                 用于资源交互的接口提供的方法有增加(add),获取(get)和列出(list)。
                </para>
                </formalpara>
	</section>

	<section id="sect-EayunOS-Developer-guide-python-sdk_Chapter-python-sdk_Section_3">
		<title>从资源集合中检索资源</title>
		<para>
	         使用get和list方法从资源集合中来检索需要的资源。 
		</para>
                <formalpara><title>get</title>
                  <para>从资源集合中检索单一的资源，结果由所提供的名称的参数而定，get方法可以有如下两个参数：
                  <itemizedlist>
                     <listitem>
                        <para>
                          名称:要检索的资源的名称。
                        </para>
                     </listitem>
                     <listitem>
                        <para>
                         id: 要检索资源的全球统一身份认证（GUID）。 
                        </para>
                     </listitem>
                  </itemizedlist>
                  </para>
                </formalpara>
                <formalpara><title>list</title>
                  <para>
                   检索多个资源，结构由所提供的条件而定。方法list提供下列参数：
                  <itemizedlist>
                     <listitem>
                        <para>
                         **kwargs: 作为一个额外参数的字典，允许存放基于过滤器的关键字。
                        </para>
                     </listitem>
                     <listitem>
                        <para>
                         query: 一个和&OVIRT;管理端提供的搜索格式相同的队列。 
                        </para>
                     </listitem>
                     <listitem>
                        <para>
                          max: 检索资源的最大条数。
                        </para>
                     </listitem>
                     <listitem>
                        <para>
                          case_sensitive: 是否大小写敏感，（True或False,默认是True)。
                        </para>
                     </listitem>
                  </itemizedlist>
                  </para>
                </formalpara>
	</section>
	
	<section id="sect-EayunOS-Developer-guide-python-sdk_Chapter-python-sdk_Section_4">
		<title>从资源集合中检索指定资源</title>
		<para>
		 这个我们举一个实际的例子来说明，下面的例子使用get方法从资源集合中检索指定的资源。
		</para>
                <example><title>使用名称来检索指定资源</title>
		<para>
		  从资源集合<emphasis>datacenters</emphasis>中检索<emphasis>Default</emphasis>的数据中心，
                  有就是使用get方法递送<emphasis>name</emphasis>的参数。
		</para>
                <programlisting language="Python">
                  dc = api.datacenters.get("Default")
                </programlisting>
		<para>
		 上述的语法等同于如下：
		</para>
                <programlisting language="Python">
               dc = api.datacenters.get(name="Default")
                </programlisting>
                
                </example>
	</section>
	
	<section id="sect-EayunOS-Developer-guide-python-sdk_Chapter-python-sdk_Section_5">
		<title>从资源集合中检索资源列表</title>
		<para>
		 此功能我们仍然以一个实例来说明，下面的例子使用<emphasis>list</emphasis>方法从资源集合中检索指定的资源。
		</para>
                <example><title>将资源集合中所有的资源列出</title>
                 <para>
                  将数据中心集合中所有的资源都检索列出，<emphasis>list</emphasis>方法中的<emphasis>query</emphasis>参数
                  允许使用&OVIRT;管理中心的检索队列，此方法用于SDK不仅可以在管理员门户可行，用户门户也可以。
                 </para>
                 <programlisting language="python">
                  dc_list = []
                  dc_page_index = 1
                  dc_page_current = api.datacenters.list(query="page %s" % dc_page_index)
                  while(len(dc_page_current) != 0):
                       dc_list = dc_list + dc_page_current
                       dc_page_index = dc_page_index + 1
                       dc_page_current = api.datacenters.list(query="page %s" % dc_page_index)
                 </programlisting>
                 <para>
                  在上述例子中，<emphasis>datacents</emphasis>集合中的所有资源，都保存在<emphasis>dc_list</emphasis>这个列表中。
                 </para>
                </example>
                <warning>
                  <para>
                  <emphasis>list</emphasis>方法列出的资源受限于&OVIRT;管理端的配置项<emphasis>SearchResultsLimit</emphasis>，
                  </para>
                  <para>
                  若想确保<emphasis>list</emphasis>返回所有的值，请去掉翻页的限制。
                  </para>
                  <para>
                  开发者亦可以使用<emphasis>max</emphasis>这个参数，来对检索结果进行最大限制输出。
                  </para>
                </warning>
                <example><title>基于过滤器的关键字列出资源</title>
                 <para>
                  列出<emphasis>datacenters</emphasis>集合中数据类型为<emphasis>nfs</emphasis>的所有资源，此例中参数<emphasis>query
                  </emphasis>和<emphasis>**karg</emphasis>均有使用，<emphasis>query</emphasis>和上述例子的功能一样，而<emphasis>
                  **karg</emphasis>则过滤数据中心的存储类型。
                 </para>
                 <programlisting language="python">
                   dc_list = []
                   dc_page_index = 1
                   dc_page_current = api.datacenters.list(query="page %s" % dc_page_index,
                                                                 **{"storage_type": "nfs"})
                   while(len(dc_page_current) != 0):
                        dc_list = dc_list + dc_page_current
                        dc_page_index = dc_page_index + 1
                        dc_page_current = api.datacenters.list(query="page %s" % dc_page_index,
                                                                      **{"storage_type": "nfs"})
                 </programlisting>
                 <para>
                  在上述例子中，<emphasis>datacents</emphasis>集合中的存储类型为<emphasis>nfs</emphasis>的数据中心资源，
                  都保存在<emphasis>dc_list</emphasis>这个列表中。
                 </para>
                </example>
                
	</section>
	
	<section id="sect-EayunOS-Developer-guide-python-sdk_Chapter-python-sdk_Section_6">
		<title>为资源集合添加资源</title>
		<para>
	         <emphasis>add</emphasis>方法为资源集合增加资源，所添加的资源有参数提供，<emphasis>ovirtsdk.xml.params
                 </emphasis>模块的实例化即是<emphasis>add</emphasis>方法所需要的参数，而特定类的模块需要使用基于不同类型的资源。
		</para>
                <example><title>为资源集合添加资源</title>
                 <para>
                   此例中，虚拟机资源被创建。
                 </para>
                 <programlisting language="python">
                 vm_params = params.VM(name="DemoVM",
                                           cluster=api.clusters.get("Default"),
                                           template=api.templates.get("Blank"),
                                           memory=536870912)
                 vm = api.vms.add(vm_params)
                 </programlisting>
                 <para>
                  此例子中所创建的虚拟机还不可以实际运行到任何的&OVIRT;虚拟化环境中：
                 </para>
                </example>
                <para>
                </para>
                <itemizedlist>
                    <listitem>
                      <para>
                        创建了一个参数对象的实例，资源的类型被创建。
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                       确认资源集合中什么资源将被添加。
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                       调用<emphasis>add</emphasis>方法，将上述的参数实例当作参数。
                      </para>
                    </listitem>
                </itemizedlist>
                <para>
                   有些参数对象本身拥有更加复杂的参数，例如：
                </para>
                <example><title>复杂参数</title>
                 <para>
                   此例子中，创建了一个NFS的数据中心运行在版本为3.2兼容模式下，首先构造<emphasis>ovirtsdk.xml.params.Version</emphasis>
                  对象，然后实例对象<emphasis>ovirtsdk.xml.params.DataCenter</emphasis>的参数使用了它，表明一个数据中心被创建，最后使用
                  <emphasis>add</emphasis>将此数据中心添加。
                 </para>
                 <programlisting language="python">
                 v_params = params.Version(major=3, minor=2)
                 dc_params = params.DataCenter(name="DemoDataCenter", storage_type="NFS",
                                                    version=v_params)
                 dc = api.datacenters.add(dc_params)
                 </programlisting>
                 <para>
                 </para>
                </example>
	</section>
	
	<section id="sect-EayunOS-Developer-guide-python-sdk_Chapter-python-sdk_Section_7">
		<title>更新资源集合</title>
		<para>
		欲更新资源，开发者必须首先从资源集合中检索到它，更改为想要的内容，然后使用<emphasis>update</emphasis>
                来保存，使之生效。关于更改使用<emphasis>set_*</emphasis>来更改检索到的资源，<emphasis>*</emphasis>表示资源的某个属性。
		</para>
                <example><title>更新资源</title>
                 <para>
                  此例中一个名称为<emphasis>DemoDataCenter</emphasis>的数据中心的描述信息被更新：
                 </para>
                 <programlisting language="python">
                 dc = api.datacenters.get("DemoDataCenter")
                 dc.set_description("This data center description provided using the Python SDK")
                 dc.update()
                 </programlisting>
                 <para>
                 </para>
                </example>
	</section>
	
	<section id="sect-EayunOS-Developer-guide-python-sdk_Chapter-python-sdk_Section_8">
		<title>从资源集合中删除资源</title>
		<para>
	         欲删除资源，开发者必须首先从资源集合中检索到它，然后使用<emphasis>delete</emphasis>方法。	
		</para>
                <example><title>从资源集合中删除资源</title>
                 <para>
                 从<emphasis>vms</emphasis>资源集合中删除一个名叫<emphasis>DemoVM</emphasis>的虚拟机。
                 </para>
                 <programlisting language="python">
                 vm = api.vms.get("DemoVM")
                 vm.delete()
                 </programlisting>
                 <para>
                 </para>
                </example>
	</section>
	
	<section id="sect-EayunOS-Developer-guide-python-sdk_Chapter-python-sdk_Section_9">
		<title>错误处理</title>
		<para>
	         当错误发生时，SDK使用异常来高亮显示它们，SDK所定义的异常类型亦是python解释器所定义，所有的异常定义可以从
                 <emphasis>ovirtsdk.infrastructer.errors</emphasis>模块中找到。	
		</para>
                <formalpara><title>ConnectionError</title>
                  <para>
                    当传输层发生错误时抛出。
                  </para>
                </formalpara>
                <formalpara><title>DisconnectedError</title>
                  <para>
                  当已经明确的断开连接后尝试使用SDK时会抛出。
                  </para>
                </formalpara>
                <formalpara><title>ImmutableError</title>
                  <para>
                   当初始化SDK时，此SDK的实例在相同的域下已经存在，这个时候会抛出此异常。
                  </para>
                </formalpara>
                <formalpara><title>NoCertificatesError</title>
                  <para>
                   没有CA证书时抛出，当然insecure设置为False。
                  </para>
                </formalpara>
                <formalpara><title>RequestError</title>
                  <para>
                   任何类型的oVirt服务端错误发生时抛出。
                  </para>
                </formalpara>
                <formalpara><title>UnsecuredConnectionAttemptError</title>
                  <para>
                   当服务端使用的是HTTPS协议，而尝试使用HTTP协议连接时抛出。
                  </para>
                </formalpara>
                <formalpara><title>MissingParametersError</title>
                  <para>
                   当使用get()方法时没有提供或id或名称的任何参数时抛出。
                  </para>
                </formalpara>
                <para> 
                 上述这些异常在捕获和处理时和python的异常一样。
                </para>
                <example><title>捕获ConnectionError异常</title>
                 <programlisting language="python">
from ovirtsdk.api import API
from ovirtsdk.xml import params
try:
     api = API(url="https://HOST",
               user="USER,
               pass="PASS,
               ca_file="/etc/pki/ovirt-engine/ca.pem")
except ConnectionError, err:
    print "Connection failed: %s" % err
                 </programlisting>
                </example>

	</section>
	
</chapter>

